<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C#新特性]]></title>
    <url>%2F11%E7%89%88%E6%96%B0%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[1.Func&lt;int,int,int&gt; add = (x,y) =&gt; x + y; ==&gt; int add(int x,int y) =&gt;x + y; 2.object a = 5; if(a is int number) { Console.WriteLine(number);//5 } 3.只读属性: public string FullName =&gt; $&quot;{FirstName} {LastName}&quot;; 终止某个任务CancellationTokenSource source = new CancellationTokenSource(); CancellationToken token = source.Token; Task&lt;DateTime&gt; getup = Task&lt;DateTime&gt;.Run(() =&gt; //getup已经Run()起来了 { token.ThrowIfCancellationRequested(); //如果被cancel()，抛出异常 Console.WriteLine($&quot;Task-{Task.CurrentId}：起床啦！....&quot; + $&quot;ThreadId:{Thread.CurrentThread.ManagedThreadId}&quot;); return DateTime.Now; }, token); //传入token指令，确保cancel通知能够被侦听 source.Cancel(); //使用source进行cancel try { getup.Wait(); //只有在Wait()时才能捕获异常 } catch (AggregateException ae) { //使用Handle()方法进行处理 ae.Handle((e) =&gt; { Console.WriteLine(&quot;canceled?&quot;); return true; //表示已经成功处理，不需要再抛出异常 }); } static void Foo(StringBuilder sbb /* string sbb*/) { sbb.Append(&quot;test&quot;); sbb = null; } StringBuilder sb = new StringBuilder(); Foo(sb);//test win+D 显示桌面 win+S 搜索 win+E 打开文件夹 win+I 设置 win+L 锁定屏幕 win+; Emoji输入框 win+shift+s 截屏 win+ctrl+D 建虚拟桌面]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令]]></title>
    <url>%2Fgit%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[CMDsc 是用来与服务控制管理器和服务进行通信 dir 显示当前目录中的文件 dir /? 查看dir帮助 set 查看所有环境变量 cd .. 返回上一级目录 type nul &gt; test.txt 创建test.txt空文件 del file_name 删除文件 notepad test.txt 打开test.txt type test.txt 读取test.txt echo &gt; test.txt echo打开 写入test.txt(没有文件就创建) rd/s/q 盘符:\某个文件夹 （强制删除文件文件夹和文件夹内所有文件） del/f/s/q 盘符:\文件名 （强制删除文件，文件名必须加文件后缀名） gitgit init 在当前目录初始化一个仓库 git remote show 查看仓库名 git remote rename oldName newName 改为newName git add test.txt 把当前目录中test.txt添加到本地git仓库(git add . 添加所有) git status 查看仓库中文件状态 git commit -m &quot;描述信息&quot; -a 提交所有已更改的commit文件 git commit test.txt --amend 把文件提交的最近2条日志覆盖为最新的一条 git diff test.txt 在仓库目录,test.txt已提交和暂存区的差异 git commit --amend 修改最近一次的commit描述 git rebase -i HEAD~3 修改commit倒数第三条 修改后执行 git rebase --continue git push -f git log 查看提交日志(返回324b7...是提交的版本号) git log -2 -p 最新的2条更新及改动详情 git log --since=2.weeks 最近两周以内的提交 git log test.txt 查看test.txt更新日志 git log --pretty=oneline 在一行上精简显示日志 git rm test.txt 仓库和本地都删除 git rm --cached test.txt 从已提交移除,变为untrack del test.txt 删除test.txt git reset HEAD test.txt 从仓库撤销到暂存区 git checkout -- test.txt 让这个文件回到最近一次git commit或git add时的状态 git reset --hard 324b7 根据日志号前几位回滚 git reflog 回滚后,查看命令历史,以便回到未来 git remote -v 查看当前配置的远程仓库 git remote rename test.txt new.txt test改名为new git ls-files 查看仓库中已提交文件 git mv test.txt testNew.txt 改名为testNew.txt git tag v0.1 3d2342 按照版本号打标签 git tag -d v0.1 按版本号删除 git show v0.1 按标签号查看提交信息 git checkout v0.1 按标签号回滚,日志也回滚 git reset --hard b65bb6f 按照日志号回滚到未来或过去 配置gitssh-keygen -t rsa -C &quot;github上注册的邮箱&quot; 创建本地ssh key ssh -T git@github.com 验证是否配置成功 git config --global user.name &quot;github用户名&quot; git config --global user.email &quot;注册github的邮箱&quot; git config --list 查看git已有配置信息 提交到GitHubgit clone url 从远程克隆仓库到当前目录 git push 自己取的仓库名 v0.1 推送标签到远程仓库 git push -u origin master 第一次推送到远程仓库origin的master分支 git fetch 获取远程仓库里（别人提交的）未同步的更新信息，并存放到本地仓库 git merge 将fetch得到的更新同步到工作区（分支合并） git pull 等价于 fetch + merge git config receive.denyCurrentBranch ignore 本地克隆push报错denyCurrentBranch,在远程设置接收配置 git push origin feature 推送到远程origin,如果没有feature就远程创建 分支 git init --bare 创建裸仓库(远程端) git remote add dev url 在url上创建远程仓库dev git checkout -b rel 强制创建rel分支 本地磁盘提交1,初始化两个文件夹sample,remote 2,两文件夹:git init 3,sample里创建文件并commit 4,添加远程仓库:git remote add origin c:\..\remote 5,remote路径下:git config receive.dencyCurrentBranch ignore 6,sample推送:git push origin master 推送到GitHub1,在GitHub上创建仓库,ignore选Visual Studio,添加readme. 2,本地:git clone git@github.com:username/sample.git 3,本地commit后:git push origin master (远程默认名origin)]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xUnit.NET对.NET Core单元测试]]></title>
    <url>%2FxUnit.NET%E5%AF%B9.NET%20Core%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[为什么要自动化测试 可以频繁进行测试 可以在任何时间测试,也可以按计划进行 比人工测试快,更快发现错误 非常可靠,测试代码与生产代码紧密结合 使得开发团队更具幸福感]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Asp.Net Core</tag>
        <tag>xUnit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[缓存&数据压缩&token]]></title>
    <url>%2F%E7%BC%93%E5%AD%98%26%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9%26token%2F</url>
    <content type="text"><![CDATA[客户端Response缓存： 基于Header 客户端缓存 使用ResponseCache这个Attribute 在 Startup 里设置: services.AddMvc(options=&gt; { options.CacheProfiles.Add(&quot;Default&quot;,new CacheProfile { Duration=30//30秒后缓存过期 }); }); 在Controller使用： //缓存保存时间30秒，保存位置在客户端。前进后退可用，刷新重新请求 //[ResponseCache(Duration=30,Location=ResponseCacheLocation.Client)] [ResponseCache(CacheProfileName=&quot;Default&quot;)] public IActionResult Index() { return View(); } 服务器端缓存:Startup里: services.AddMemoryCache(); 使用： 1. 新建一个类，存储缓存的key： public class CacheEntryConstants { //声明一个缓存的key ：AlbumsOfDay，值是它的字符串 public const string AlbumOfDay = nameof(AlbumOfDay); } 2. private readonly IMermoryCache _memoryCache; private readonly IAlbumService _albumService; private readonly HtmlEncoder _htmlEncoder;//防御xss恶意代码 public AlbumController(IMermoryCache memoryCache,IAlbumService albumService,HtmlEncoder htmlEncoder) { this._memoryCache = memoryCache; this._albumService = albumService; this._htmlEncoder = htmlEncoder; } 3.缓存Album这个页面: public async Task&lt;IActionResult&gt; Index() { //参数（缓存的key，缓存的值） if(!_memoryCache.TryGetValue(CacheEntryConstants.AlbumsOfDay, out LIst&lt;Album&gt; cacheAlbums)) { //缓存为空，获取值放入缓存 cacheAlbums = await _albumService.GetAll(); var cacheEntryOptions = new MemoryCacheEntryOptions() //在20秒内获取缓存值，过期时间延后20秒 .SetSlidingExpiration(TimeSpan.FromSeconds(20)); //缓存20秒就过期 //.SetAbsoluteExpiration(TimeSpan.FromSeconds(20)); //设置缓存的值 _memoryCache.Set(CacheEntryConstants.AlbumsOfDay, cacheAlbums, cacheEntryOptions); } return View(cacheAlbums); } 为提交数据做处理：public async Task&lt;IActionResult&gt; Create() { var new Model = await _albumService.AddAsync(new Album { //为提交的数据做处理 Artist = _htmlEncoder.Encode(albumCreateViewModel.Artist), ........ }) } 使用数据压缩功能:添加服务： services.AddResponseCompression(); 使用： app.UseReponseCompression(); Token防跨站伪造：//为所有post添加token标签 services.AddMvc(opt=&gt; { //在不需要token的post上添加 [IgnoreAntiforgeryToken] opt.Filters.Add(new AutoValidateAntiforgeryTokenAttribute()); }); //单个方法添加token： [ValidateAntiForgeryToken]]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Asp.Net Core</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日志&Model验证]]></title>
    <url>%2F%E6%97%A5%E5%BF%97%26Model%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[第三方日志Serilog.AspNetCore1. NuGet安装Serilog.AspNetCore，Serilog.Sinks.Console(调试控制台显示日志),Serilog.Sinks.File 2. Main方法里： Log.Logger = new LoggerConfiguration() .MinimumLevel.Debug()//最下级别Debug //遇到Microsoft命名空间最低级别Information .MinimumLevel.Override(&quot;Microsoft&quot;,LogEventLevel.Information) .Enrich.FromLogContext()//通过上下文可以记录其他信息 .WriteTo.Console() //日志文件创建在logs文件夹里，每天一个 .WriteTo.File(Path.Combine(&quot;logs&quot;,&quot;log.txt&quot;),rollingInterval:RollingInterval.Day) .CreateLogger(); 使用： public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt; WebHost.CreateDefaultBuilder(args) .UseSerilog()//使用日志 .UseStartup&lt;Startup&gt;(); Model验证1. 写一个验证已存在角色方法： [AcceptVerbs(&quot;Get&quot;,&quot;Post&quot;)]//接受get，post请求 public async Task&lt;IActionResult&gt; CheckRoleExit([Bind(&quot;RoleName&quot;)] string roleName) {//Bind 只接收View传过来的RoleName var role = await _roleManager.FindByNameAsync(roleName); if(role!=null) { return Json(&quot;角色已存在！&quot;);//return Json(false); //返回ErrorMessage里的值 } return Json(true); } 2. Remote在前台直接调用CheckRoleExist方法验证角色是否存在 在添加角色的RoleAddViewModel里： [Remote(nameof(RoleController.CheckRoleExit),&quot;Role&quot;,ErrorMessage = &quot;角色存在&quot;)] public string RoleName{get;set;} 3. 在AddRole页面： @model MyWeb.ViewModels.RoleAddViewModel &lt;form method=&quot;post&quot;&gt; &lt;input class = &quot;form-control&quot; asp-for=&quot;RoleName&quot;/&gt; &lt;span class = &quot;invalid&quot; asp-validation-for=&quot;RoleName&quot;&gt;&lt;/span&gt; 在没有提交刷新情况下会验证角色是否已存在]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Asp.Net Core</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#基础]]></title>
    <url>%2F%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[C#基础：mian方法可以返回int，通常是0，不是0，就发生了错误 var b = 0b1001;//前面加上0b二进制 var a = 0x4F;//16进制 Console.WriteLine(1.0 / 0.0);//∞ Console.WriteLine(-1.0 / 0.00);// -∞ Console.WriteLine(1.0/-0.00);//-∞ Console.WriteLine(-1.0/-0.0);//∞ //NaN 和 NaN不相等，使用Object.Equal()时相等。 Console.WriteLine(0.0/0.0);//NaN Console.WriteLine((1.0/0.0)-(1.0/0.0));//NaN Console.WriteLine((0.0/0.0)==double.NaN);//false Console.WriteLine(object.Equals((0.0/0.0),double.NaN));//true //double 特殊值：+0,-0,∞,-∞,NaN const 和 static readonly区别： const（静态常量）:在编译期间解析的常量必须声明就初始化(int,float,枚举,字符串。不能new)可修饰类中成员，也可修饰函数体内局部变量 static readonly（动态常量）:在运行期间解析的常量可在声明时初始化，也可在构造器中初始化只修饰类中成员 去掉集合里的重复数据int[] a={1,2,3,3,,5,5,7,3,1,4}; HasSet&lt;int&gt; hs = new HasSet&lt;int&gt;(a); foreach(var item in hs) { Console.WriteLine(item+ &quot; &quot;); } //无限循环 for(; ;) { } 空接合操作符x??y??z 如果之前所有表达式为空，就选择最后一个 continue语句bool insideDomain=false; Console.WriteLine(&quot;Enter an email address:&quot;); string email=Console.ReadLine(); Console.Write(&quot;The email domain is:&quot;); foreach(char letter in email) { if(!insideDomain) { if(letter==&#39;@&#39;) { insideDomain=true; } continue; } Console.Write(letter); } 泛型Student:PersonPerson s = new Person();s = new Student();Person p = new Person();p = new Person();//报错,泛型模板不同typeof(T);//编译时运行,可以获取T数据类型.Gettype();//运行时执行default(T);//泛型默认值 网络基本系列将数据流分割多路传输,传输形式称为协议数据单元(PDU)网关:主机发送消息到远端网络,必须使用路由器,也称默认网关.mac地址:是生产厂商烧制录好的,物理地址,一般不能改,更换网卡后就改变. getmac或ipconfig /all Server=(localdb)\mssqllocaldb;Database=CoreMoivie;Trusted_Connection=True;MultipleActiveResultSets=true var a=new [] {&#39;a&#39;,&#39;c&#39;,&#39;d&#39;,2};//var是int类型,字符可以隐式转换为无符号short整型 静态字段存放在堆上,会存活到应用程序域停止 变量和方法存放在栈上 char类型默认值 &#39;/0&#39; 方法,构造函数,索引器都可以申明可选参数]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GtiHub+Hexo搭建个人博客]]></title>
    <url>%2FGtiHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[这是引用 1,注册GitHub，创建仓库，仓库名：你的GitHub用户名.github.io(必须这种格式) 2,在官网下载，安装git。我们的网站本地搭建好需要用git同步到GitHub上。开始菜单里打开Git here bash，配置信息： git config --global user.name &quot;你的GitHub用户名&quot; (Enter执行) git config --global user.email &quot;你的GitHub注册邮箱&quot; (Enter执行) 本地生成ssh密钥文件（连接Github需要）： ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot; 然后三个回车，默认不设置密码。 3,然后在.ssh文件夹中用Notepad++ 打开id_rsa.pub密钥，将内容全部复制在GitHub个人下点settings,打开SSH and GPR keys项，新建 new SSH Key：标题随便写，将密钥复制到key新建。 4,在Git Bash中检测公钥是否可用，输入: ssh git@github.com 如果显示成功，这就完成了Git与GitHub绑定 5,安装Node.jsHexo是基于Node.js的,Node.js包含环境变量及npm的安装。 6,安装HexoHexo是博客网站框架。利用npm命令全局安装：npm install -g hexo在电脑上创建一个文件夹，命名myblog，然后鼠标右键文件夹 Git Bash Her安装完后 初始化博客：hexo init安装依赖包： npm install初始化完 检测运行一下：hexo g # 生成(g是generate缩写)hexo s然后再浏览器中打开localhost:4000,就可以打开博客首页 常用的Hexo命令：npm install hexo -g #全局安装Hexonpm update hexo -s #升级hexo init #初始化博客 命令简写：hexo n “文章名” == hexo new “文章名” #新建文章hexo g == hexo generate #生成hexo s == hexo server #启用服务预览hexo d ==hexo deploy #部署本地网页到GitHub hexo server #Hexo会监视文件改变并自动更新，，无需重启服务hexo server -s #静态模式hexo server -p 5000 #改变端口 $ hexo server hexo server -i 192.168.0.1 #自定义IPhexo clean #清楚缓存 7,把Hexo与GitHub关联起来，打开站点配置文件myblog/_config.yml,翻到最后修改为：deploy: type: git #注意空格 ropo: git@github.com:你的GitHub用户名/你的GitHub用户名.github.io.git branch: master保存站点配置文件 安装Git部署插件：npm install hexo-deployer-git –save完成后执行：hexo cleanhexo ghexo d这样你的网站被部署在GitHub上了，可以网络访问 你的GitHub用户名.github.io 修改文章内链接样式修改文件 themes\next\source\css_common\components\post\post.styl，在末尾添加如下css样式，： // 文章内链接文本样式.post-body p a{ color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover { color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; }} 文章添加分类定位到站点目录下: hexo new page categories编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下：title: 分类date: 2014-12-22 12:39:04 type: “categories”在菜单中添加链接。编辑 主题配置文件 ， 添加 categories 到 menu 中，如下:menu: home: / archives: /archives categories: /categories 添加标签在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ：$ cd your-hexo-site$ hexo new page tags编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：title: 标签date: 2014-12-22 12:39:04 type: “tags”在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下:menu: home: / archives: /archives tags: /tags 百度谷歌收录你的站点 $ npm install hexo-generator-sitemap --save #google npm install hexo-generator-baidu-sitemap --save #百度 添加本地搜索 $ npm install hexo-generator-searchdb --save 站点配置文件，任意位置新增： search: path: search.xml filed: post format: html limit: 10000 编辑主题配置文件，启用搜索: local_serach: enable: true]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>GitGub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EFCore基础]]></title>
    <url>%2FEFCore%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[种子数据库//查看EFCore命令：get-help entityframeworkcore//script-migration 生成sql脚本 //Model里有一个省份Province，一个城市City //在 DBContex 里： protected override void OnModelCreating(ModelBuilder modelBuilder) { //添加了一个省份的种子，Id是自增的 modelBuilder.Entity&lt;Province&gt;().HasData( new Province { Id = 1, Name=&quot;广东&quot;, Populiation=70000000 }); } 生成迁移： Add-Migration xxx 获取客户端IP地址在Startup.cs里： services.AddHttpContextAccessor(); service.TryAddSingleton&lt;IActionContextAccessor,ActionContextAccessor&gt;(); 在MVC视图里： @inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor 使用方法： Client IP: @HttpContextAccessor.HttpContext.Connection.RemoteIpAddress.ToString() Session 和 Cookie1. 手动添加Session支持： services.AddDistributedMemoryCache(); services.AddSession(options=&gt; { options.IdleTimeOut = TimeSpan.FromMinutes(20); options.Cookie.HttpOnly = true; }); 2. app.UseSession(); 3. 设定和获取Session值： HttpContest.Session.SetString(&quot;CaptchaCode&quot;,resultCaptchaCode); HttpContext.Session.GetString(&quot;CaptchaCode&quot;); 清除值： context.Session.Remove(&quot;CaptchaCode&quot;);]]></content>
      <categories>
        <category>ASP.NetCore</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Controller返回View]]></title>
    <url>%2FController%E8%BF%94%E5%9B%9EView%2F</url>
    <content type="text"><![CDATA[IActionResult控制器里面： public IActionResult Index() { //IActionResult决定返回字符串，mvc框架会在管道某处返回结果 //Action里决定要做什么事，做事的是mvc框架 return Content(&quot;Hello!!!&quot;); } public string Index() { return &quot;Hello!!!&quot;;//会直接返回字符串 } 返回View视图1,新建一个Student类，里面有Id,FirstName,LastName。为了让数据与Controller无关，建一个Services文件夹，建一个接口： public interface IRepository&lt;T&gt; where T:class { //返回集合，这里用IEnumerable&lt;T&gt; IEnumerablbe&lt;T&gt; GetAll(); } 2,Services文件夹里建一个InMemoryRepository类，继承IRpository&lt;T&gt;： public class InMemoryRepository:IRepository&lt;Student&gt; { public Ienmuerable&lt;Student&gt; Getall() { return new List&lt;Student&gt;() { new Student{Id=2,FirstName=&quot;Nick&quot;,LastName=&quot;Carter&quot;}, new Student{Id=3,FirstName=&quot;Aick&quot;,LastName=&quot;Farter&quot;} }; } } 3,在Startup类ConfigureServices里注入服务： services.AddScoped&lt;IRepository&lt;Student&gt;,InMemoryRepository&gt;(); Configure里配置路由： app.UseMvc(builder=&gt; { builder.MapRoute(&quot;Default&quot;,&quot;{controller=Home}/{action=Index}/{id?}&quot;); }); 4,HomeController里调用服务，在构造函数里注入: private readonly IRepository&lt;Student&gt; _repository;//只读字段 //鼠标移动到repository参数上，Ctrl+.快捷生成自读字段 public HomeController(IRepository&lt;Student&gt; repository) { this._repository=repository; } public IActionResult Index() { var student=_repository.GetAll(); return View(student); } 运行返回student列表 Model里的字段不需要都展示在View上，可以建ViewModelpublic class StudentViewModel { public int Id{get;set;} public string Name{get;set;} public int Age{get;set;} } public class HomeIndexViewModel { //就一个属性，是student列表集合 public Ienumerable&lt;StudentViewModel&gt; students{get;set;} } //HomeController public IActionResult Index() { var student=_repository.GetAll(); var vms=student.Select(x=&gt;new StudentViewModel() { Name=$&quot;{x.FirstName} {x.LastName}&quot;, Age=DateTime.Now.Subtract(x.BirthDate).Days/365 }); var vm=new HomeIndexViewModel() { students=vms }; return view(vm); } //视图中以前用 @Html.ActionLink() //Core中在View文件夹添加 _ViewImports.cshtml 视图导入页: //@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers //引用Tag Helpers： &lt;a asp-action=&quot;Detial&quot; asp-route-id=&quot;@s.Id&quot;&gt;id是需要的参数&lt;/a&gt;]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Asp.Net Core</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asp.Net Core中间件和路由]]></title>
    <url>%2FAsp.Net%20Core%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8C%E8%B7%AF%E7%94%B1%2F</url>
    <content type="text"><![CDATA[注入日志中间件public void Configure(IApplicationBuilder app,IHostingEnvironment env,IWelcomeService welcomeService,ILogger&lt;Startup&gt; logger) { //Use在启动配置的时候走了一遍，只运行一次 app.Use(next=&gt; { logger.LogInformation(&quot;app.Use()......&quot;);//使用日志 //请求没有拦截的话，请求每次都会运行 return async httpContext=&gt; { logger.LogInformation(&quot;----async httpContext&quot;); if(httpContext.Request.Path.StartsWithSegments(&quot;/first&quot;)) { logger.LogInformation(&quot;----First!!!&quot;); await httpContext.Response.WriteAsync(&quot;First!!!&quot;); } else { logger.LogInformation(&quot;----next(httpContext)&quot;); await next(httpContext);//没有访问first目录，继续往下走 } }; }); app.Run(async(context)=&gt; { var welcome=welcomeService.GetMessage(); await context.Response.WriteAsync(welcome); }); } 使用路由路由分为：1.Convention Route(约定路由) 2.Attribute Route(属性路由),不能混用 约定路由：public void Configure(....) { //创建wwwroot文件夹，新建index.html，使用app.UseFileServer()才能访问 //使用默认路由配置的mvc app.UseStaticFiles(); //app.UseMvcWithDefaultRoute(); //手动配置约定路由 /Home/Index/3 app.useMvc(builder=&gt; { //自定义路由 （名称，模板规则）如果目录没有Home，Index，默认使用Home，Index builder.MapRoute(&quot;Default&quot;,&quot;{controller=Home}/{action=Index}/{id?}&quot;); }); } 访问网站根目录即可到达Index页面 属性路由新建一个AboutController类 //按照路径，先访问控制器名，再访问方法 [Route(&quot;[controller]/[action]&quot;)] public class AboutController { public string Me() { return &quot;Dave&quot;; } public string Company() { return &quot;No Company&quot;; } } /about/me 返回Dave]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Asp.Net Core</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asp.Net Core中的配置和服务注入]]></title>
    <url>%2FAsp.Net%20Core%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[Startup类Program里面的CreateWebHostBuilder方法默认使用Startup类。Startup： 可选择性的包含ConfigureServices方法以及配置应用服务 必须包含Configure方法以创建应用的请求处理管道,常见中间件管道顺序： 1.异常/错误处理 2.HTTP严格传输安全协议 3.HTTPS重定向 4.静态文件服务器 5.Cookie策略实施 6.身份验证 7.会话 8.MVC Configure方法使用IApplicationBuilder来使用中间件 有Use，Map，Run三种使用方式： 1.Use使用中间件配置请求管道 2.Map管道分支 3.Run管道短路 Configure方法里注入IConfiguration接口，读取 appsettings.json配置public void Configure(IApplicationBuilder app,IHostingEnvironment env,IConfiguration configuration) { if(env.IsDevelopment()) { app.UseDevelopmerExceptionPage(); } app.Run(async(context)=&gt; { //appsettings.json里面添加的key是Welcome,值为Hello World！ var welcome=configuration[&quot;Welcome&quot;]; await context.Response.WriteAsync(welcome); }); } 运行结果：Hello World！ ConfigureServices配置应用服务public void ConfigureServices(IServiceCollection services) { //服务注入 &lt;接口，实现接口的类&gt; services.AddSingleton&lt;IWelcomeService,WelcomeService&gt;(); //AddSingleton只能有WelcomeService实例 //AddTransient每请求一次方法就创建一个实例 //AddScoped 整个HTTP请求只创建一个实例 } public void Configure(IApplicationBUilder app,IHostingEnvironment env,IWelcomeService welcomeService) { if(env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.Run(async(context)=&gt; { //调用GetMessage方法 var welcome=welcomeService.GetMessage(); await context.Response.WriteAsync(welcome); }); } IWlcomeService接口及实现public interface IWelcomeService { string GetMessage(); } public class WelcomeService:IWelcomeService { public string GetMessage() { return &quot;Hello from IWelcome service!&quot;; } } 运行结果:Hello from IWelcome service!]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Asp.Net Core</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[构造函数使用]]></title>
    <url>%2F%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[任何一个类至少会有一个构造方法，即使不写，默认会有一个公开的无参构造方法： public class MyClass { //.. } 它的构造方法就是： public Myclass() { //.. } 当我们实例化的时候，其实调用了构造方法。 可以在构造方法上写注释，new时看注释就知道了。 ///&lt;summary&gt; ///这是类 ///&lt;/summary&gt; public class Program { ///&lt;summary&gt; ///这是构造方法 ///&lt;/summary&gt; public Program() { //.. } } 通过有参数构造方法表示必填的字段，防止某些必须的字段时默认值 举个例子，如下实体： public class User { public string FirstName {get;set;} public string LastName {get;set;} public ShowName() { var user=new User(); user.FirstName=&quot;张&quot;; user.LastName=&quot;三&quot;; user.ShowName(); //输出 张三 } } 如果少写一个的话： static void Main(string[] args) { var user=new User(); user.LastName=&quot;三&quot;; user.ShowName(); // 输出 三 } 这就引起不是我们想要的因此构造方法这样就可以避免了: public class User { public User(string firstName,string lastName) { this.FirstName=firstName; tshi.LastName=lastName; } public string FirstName {get; private set;} public string LastName {get; private set;} public string ShowName() { return FirstName+LastName; } } 这里加入了两个参数，姓和名。因此实例化这个对象时必须传入这两个参数。 var user=new User(&quot;张&quot;,&quot;三&quot;); user.ShowName(); //输出 张三 注意：set访问修饰符设置成pbulic属性可以被外面赋值,调用时就会有问题： var user=new User(&quot;张&quot;,&quot;三&quot;); user.FirstName=&quot;李&quot;; user.LastName=&quot;四&quot;; user.ShowName();//输出 李四 本文转载自 http://dotnetstar.club/c/35]]></content>
      <tags>
        <tag>C#</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[框架与架构设计]]></title>
    <url>%2F%E6%A1%86%E6%9E%B6%E4%B8%8E%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[test架构：软件体系结构通常称为架构 框架与架构共同点：提高生产效率为了解决问题都是体系化的产物·····不同点：框架是总体规划，协调单元完成工作框架是具体实施内容]]></content>
      <tags>
        <tag>基础</tag>
        <tag>架构</tag>
      </tags>
  </entry>
</search>
